{"version":3,"sources":["mllembed.js"],"names":["root","moduleName","factory","define","amd","apply","exportName","replace","this","window","document","lazycaller","mllembed","args","Array","prototype","slice","call","arguments","method","shift","configuration","_embedUrl","_youtubeRegexps","getQueries","i","list","hasOwnProperty","match","push","config","key","value","oldValue","length","convert","element","tagName","Error","toUpperCase","regexp","src","videoId","videoQueries","split","queryString","concat","join","run","iframes","getElementsByTagName","iframe","getAttribute","setAttribute","isReady","readyCallbacks","ready","callback","onReady","setTimeout","readyState","addEventListener","stack"],"mappings":"CAIC,SAAUA,EAAMC,EAAYC,GAEzB,YAGA,IAAsB,kBAAXC,SAAyBA,OAAOC,IAEvCD,OAAOF,KAAgB,WAGnB,MAAOC,GAAQG,MAAML,SAItB,CAKH,GAAIM,GAAaL,EAAWM,QAAQ,MAAO,GAE3CP,GAAKM,GAAcJ,EAAQG,MAAML,KAKvCQ,KAAM,YAAa,WAElB,YAEC,IAAIC,GAASD,KACTE,EAAWD,EAAOC,SAClBC,EAAaF,EAAOG,SAMpBA,EAAW,WAGX,GAAIC,GAAOC,MAAMC,UAAUC,MAAMC,KAAKC,WAGlCC,EAASN,EAAKO,OAGlBR,GAASO,GAAQd,MAAM,KAAMQ,GAKjCD,GAASS,eACLC,UAAW,qCACXC,iBACI,kEACA,+DACA,6EAKRX,EAASY,WAAa,WAElB,GACIC,GADAC,IAGJ,KAAKD,IAAKb,GAASS,cAEXT,EAASS,cAAcM,eAAeF,KAEjCA,EAAEG,MAAM,QACTF,EAAKG,KAAKJ,EAAI,IAAMb,EAASS,cAAcI,IAKvD,OAAOC,IAKXd,EAASkB,OAAS,SAAUC,EAAKC,GAG7B,GAAIC,GAAWrB,EAASS,cAAcU,EAQtC,OALyB,KAArBb,UAAUgB,SACVtB,EAASS,cAAcU,GAAOC,GAI3BC,GAKXrB,EAASuB,QAAU,SAAiBC,GAGhC,GAAuB,gBAAZA,KAAyBA,EAAQC,QACxC,KAAM,IAAIC,OAAM,yEAMpB,IAAsC,WAAlCF,EAAQC,QAAQE,cAChB,KAAM,IAAID,OAAM,yEAKpB,KAAK,GADDV,GACKH,EAAIb,EAASS,cAAcE,gBAAgBW,OAAQT,KAAM,CAC9D,GAAIe,GAAS5B,EAASS,cAAcE,gBAAgBE,EAMpD,IAHAG,EAAQQ,EAAQK,IAAIb,MAAMY,GAItB,MAKR,IAAKZ,EAID,OAAO,CAMX,IAAIc,GAAUd,EAAM,GAGhBe,EAAef,EAAM,GAAGA,EAAM,GAAGgB,MAAM,QAMvCC,EAAcF,EAAaG,OAAOlC,EAASY,cAAcuB,KAAK,IAKlE,OAFAX,GAAQK,IAAM7B,EAASS,cAAcC,UAAYoB,EAAU,IAAMG,GAE1D,GAKXjC,EAASoC,IAAM,WAMX,IAAK,GADDC,GAAUvC,EAASwC,qBAAqB,UACnCzB,EAAIwB,EAAQf,OAAQT,KAAM,CAC/B,GAAI0B,GAASF,EAAQxB,EAGjB0B,GAAOC,aAAa,2BAKxBD,EAAOE,aAAa,yBAAyB,GAG7CzC,EAASuB,QAAQc,EAAQxB,OAOjCb,EAAS0C,SAAU,CACnB,IAAIC,KACJ3C,GAAS4C,MAAQ,SAAeC,GAG5B,GAAwB,kBAAbA,GACP,KAAM,IAAInB,OAAM,wEAIpB,OAAI1B,GAAS0C,YAGTG,GAAS7C,OAOb2C,GAAe1B,KAAK4B,GAMxB,IAAIC,GAAU,WAGV9C,EAAS0C,SAAU,CAInB,KADA,GAAIG,GACIA,EAAWF,EAAenC,SAC9BqC,EAAS7C,EAKbH,GAAOkD,WAAW/C,EAASoC,IAAK,GA6BpC,IAT4B,aAAxBtC,EAASkD,WACTF,KAGAjD,EAAOoD,iBAAiB,OAAQH,GAAS,GACzChD,EAASmD,iBAAiB,mBAAoBH,GAAS,IAIjC,gBAAf/C,IAA2BA,EAAWmD,MAC7C,IAAK,GAAIrC,GAAId,EAAWmD,MAAM5B,OAAQT,KAAM,CACxC,GAAIR,GAAON,EAAWmD,MAAMrC,EAG5Bb,GAASP,MAAM,KAAMY,GAK7B,MAAOL","file":"mllembed.min.js","sourcesContent":["/*globals define */\r\nif (typeof DEBUG === 'undefined') DEBUG = false; //jshint ignore:line\r\n//AMD Loader with fallback\r\n//Cleaner version of https://github.com/umdjs/umd/blob/master/amdWeb.js\r\n(function (root, moduleName, factory) {\r\n\r\n    'use strict';\r\n\r\n    //Check if an AMD module loader is available\r\n    if (typeof define === 'function' && define.amd) {\r\n        //Register the wrapper\r\n        define(moduleName, [], function () {\r\n\r\n            //Call the factory\r\n            return factory.apply(root);\r\n\r\n        });\r\n    //Export to root (window) otherwise\r\n    } else {\r\n\r\n        //Remove dots from the moduleName\r\n        //If we don't, users would have to access it using `window['my.module.name'].method()`\r\n        //Doing this will allow them to use just `mymodulename.method()`\r\n        var exportName = moduleName.replace(/\\./g, '');\r\n\r\n        root[exportName] = factory.apply(root);\r\n\r\n    }\r\n\r\n//Module registration\r\n}(this, 'mll.embed', function () {\r\n\r\n   'use strict';\r\n\r\n    var window = this;\r\n    var document = window.document;\r\n    var lazycaller = window.mllembed;\r\n\r\n    //Setup the caller\r\n    //This caller just replicates async loader's `lazyloader()` to bypass the lazy call stack and invoke methods directly\r\n    //For sync loading or AMD loading, you don't have to use `mllembed('method', 'arg', ...)` since `mllembed.method('arg', ...)` will be available\r\n    //README.md has more information on this\r\n    var mllembed = function () {\r\n\r\n        //Convert arguments to array\r\n        var args = Array.prototype.slice.call(arguments);\r\n\r\n        //Get the method\r\n        var method = args.shift();\r\n\r\n        //Call the method\r\n        mllembed[method].apply(null, args);\r\n\r\n    };\r\n\r\n    //Initialize configuration\r\n    mllembed.configuration = {\r\n        _embedUrl: 'https://embed.movielala.com/embed/',\r\n        _youtubeRegexps: [\r\n            /^https?:\\/\\/www\\.youtube\\.com\\/embed\\/([\\w\\-]{11})(?:\\?(.+)$|$)/,\r\n            /^https?:\\/\\/www\\.youtu\\.be\\/embed\\/([\\w\\-]{11})(?:\\?(.+)$|$)/,\r\n            /^https?:\\/\\/www\\.youtube-nocookie\\.com\\/embed\\/([\\w\\-]{11})(?:\\?(.+)$|$)/\r\n        ]\r\n    };\r\n\r\n    //The function that builds the query string\r\n    mllembed.getQueries = function () {\r\n\r\n        var list = [],\r\n            i;\r\n\r\n        for (i in mllembed.configuration) {\r\n            //Check if the property is not inherited\r\n            if (mllembed.configuration.hasOwnProperty(i)) {\r\n                //Check if it is not private\r\n                if (!i.match(/^\\_/)) {\r\n                    list.push(i + '=' + mllembed.configuration[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return list;\r\n\r\n    };\r\n\r\n    //The function that gets and sets configuration\r\n    mllembed.config = function (key, value) {\r\n\r\n        //Get the old value\r\n        var oldValue = mllembed.configuration[key];\r\n\r\n        //Set the value if it's provided\r\n        if (arguments.length !== 1) {\r\n            mllembed.configuration[key] = value;\r\n        }\r\n\r\n        //Return the old value\r\n        return oldValue;\r\n\r\n    };\r\n\r\n    //The function that converts embeds\r\n    mllembed.convert = function convert(element) {\r\n\r\n        //Is this a DOM element?\r\n        if (typeof element !== 'object' || !element.tagName) {\r\n            throw new Error('mllembed.convert() expects an IFRAME for its first and only parameter.');\r\n        }\r\n\r\n        //Is this DOM node an IFRAME?\r\n        //In HTML, element.tagName is always uppercase, but not in XML so we toUpperCase() it just in case\r\n        //https://developer.mozilla.org/en-US/docs/Web/API/Element.tagName\r\n        if (element.tagName.toUpperCase() !== 'IFRAME') {\r\n            throw new Error('mllembed.convert() expects an IFRAME for its first and only parameter.');\r\n        }\r\n\r\n        //Try to match the URL\r\n        var match;\r\n        for (var i = mllembed.configuration._youtubeRegexps.length; i--;) {\r\n            var regexp = mllembed.configuration._youtubeRegexps[i];\r\n\r\n            //Try to match\r\n            match = element.src.match(regexp);\r\n\r\n            //Did we?\r\n            if (match) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        //Did it work?\r\n        if (!match) {\r\n            \r\n            DEBUG && console.info('[mll.embed] Couldn\\'t match \"' + element.src + '\".'); //jshint ignore:line\r\n\r\n            return false;\r\n        }\r\n\r\n        DEBUG && console.info('[mll.embed] Matched \"' + element.src + '\".'); //jshint ignore:line\r\n\r\n        //Get the video ID\r\n        var videoId = match[1];\r\n\r\n        //Get the video queries\r\n        var videoQueries = match[2]?match[2].split('&'):[];\r\n\r\n        //Build the query string\r\n        //Using \"&amp;\" instead of \"&\" is an HTML thing\r\n        //Since this code isn't being inlined in HTML, we don't have to use \"&amp;\"\r\n        //http://stackoverflow.com/questions/7261628/xhtml-html-js-syntax-when-do-i-use-amp\r\n        var queryString = videoQueries.concat(mllembed.getQueries()).join('&');\r\n\r\n        //Change the source\r\n        element.src = mllembed.configuration._embedUrl + videoId + '?' + queryString;\r\n\r\n        return true;\r\n\r\n    };\r\n\r\n    //The function that looks for embeds to convert them\r\n    mllembed.run = function run() {\r\n\r\n        //Look for iframes\r\n        //We need to use lowercase 'iframe' for XML compatibility\r\n        //https://developer.mozilla.org/en-US/docs/Web/API/Element.getElementsByTagName\r\n        var iframes = document.getElementsByTagName('iframe');\r\n        for (var i = iframes.length; i--;) {\r\n            var iframe = iframes[i];\r\n\r\n            //Did we check this before?\r\n            if (iframe.getAttribute('data-mllembed-checked')) {\r\n                continue;\r\n            }\r\n\r\n            //Now we will check it for sure\r\n            iframe.setAttribute('data-mllembed-checked', true);\r\n\r\n            //Let's convert it\r\n            mllembed.convert(iframes[i]);\r\n        }\r\n\r\n    };\r\n\r\n    //The function that stores callbacks and calls them when we are ready\r\n    //The execution is FIFO\r\n    mllembed.isReady = false;\r\n    var readyCallbacks = [];\r\n    mllembed.ready = function ready(callback) {\r\n\r\n        //Is this a valid callback?\r\n        if (typeof callback !== 'function') {\r\n            throw new Error('mllembed.ready() expects a function for its first and only parameter.');\r\n        }\r\n\r\n        //Are we ready?\r\n        if (mllembed.isReady) {\r\n\r\n            //Then just call it\r\n            callback(mllembed);\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        //Push the callback to the list\r\n        readyCallbacks.push(callback);\r\n\r\n    };\r\n\r\n    //The function we call when the page is ready\r\n    //We might call it more than once, it's no problem\r\n    var onReady = function onReady() {\r\n\r\n        //Mark it\r\n        mllembed.isReady = true;\r\n\r\n        //Call the callbacks\r\n        var callback;\r\n        while ((callback = readyCallbacks.shift())) {\r\n            callback(mllembed);\r\n        }\r\n\r\n        //We could call `run()` right here, but there will probably be other scripts which inject content on DOMContentLoaded or load.\r\n        //By doing a `setTimeout(func, 0)`, we send our call to the callback queue and let everything on call stack get executed.\r\n        window.setTimeout(mllembed.run, 0);\r\n\r\n    };\r\n\r\n    //The caller\r\n    /*mllembed.caller = function () {\r\n\r\n        //Convert arguments to array\r\n        var args = Array.prototype.slice.call(arguments);\r\n\r\n        //Get the method\r\n        var method = args.shift();\r\n\r\n        //Call the method\r\n        mllembed[method].apply(null, args);\r\n\r\n    };*/\r\n\r\n    //Run!\r\n    //Are we ready?\r\n    if (document.readyState === 'complete') {\r\n        onReady();\r\n    //No?\r\n    } else {\r\n        window.addEventListener('load', onReady, false);\r\n        document.addEventListener('DOMContentLoaded', onReady, false);\r\n    }\r\n\r\n    //Invoke the calls on the lazycaller stack\r\n    if (typeof lazycaller === 'object' && lazycaller.stack) {\r\n        for (var i = lazycaller.stack.length; i--;) {\r\n            var call = lazycaller.stack[i];\r\n\r\n            //Invoke the call\r\n            mllembed.apply(null, call);\r\n        }\r\n    }\r\n\r\n    //Export library\r\n    return mllembed;\r\n\r\n}));"],"sourceRoot":"/source/"}