{"version":3,"sources":["mllembed.js"],"names":["root","moduleName","factory","define","amd","apply","exportName","replace","this","window","document","DEBUG","console","info","mllembed","args","Array","prototype","slice","call","arguments","method","shift","configuration","_autorun","_embedUrl","_youtubeRegexps","getQueries","i","list","hasOwnProperty","match","push","config","key","value","oldValue","length","convert","element","tagName","Error","toUpperCase","regexp","src","videoId","videoQueries","split","queryString","concat","join","run","iframes","getElementsByTagName","iframe","getAttribute","setAttribute","isReady","readyCallbacks","ready","callback","onReady","setTimeout","stack","lazycaller","readyState","addEventListener"],"mappings":"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","file":"mllembed.min.js","sourcesContent":["/*globals define */\r\nif (typeof DEBUG === 'undefined') DEBUG = false; //jshint ignore:line\r\n//AMD Loader with fallback\r\n//Cleaner version of https://github.com/umdjs/umd/blob/master/amdWeb.js\r\n(function (root, moduleName, factory) {\r\n\r\n    'use strict';\r\n\r\n    //Check if an AMD module loader is available\r\n    if (typeof define === 'function' && define.amd) {\r\n        //Register the wrapper\r\n        define(moduleName, [], function () {\r\n\r\n            //Call the factory\r\n            return factory.apply(root, [true]);\r\n\r\n        });\r\n    //Export to root (window) otherwise\r\n    } else {\r\n\r\n        //Remove dots from the moduleName\r\n        //If we don't, users would have to access it using `window['my.module.name'].method()`\r\n        //Doing this will allow them to use just `mymodulename.method()`\r\n        var exportName = moduleName.replace(/\\./g, '');\r\n\r\n        root[exportName] = factory.apply(root, [false]);\r\n\r\n    }\r\n\r\n//Module registration\r\n}(this, 'mll.embed', function (amd) {\r\n\r\n   'use strict';\r\n\r\n    var window = this;\r\n    var document = window.document;\r\n\r\n    DEBUG && console.info('[mll.embed] Factory called.'); //jshint ignore:line\r\n\r\n    //Setup the caller\r\n    //This caller just replicates async loader's `lazyloader()` to bypass the lazy call stack and invoke methods directly\r\n    //For sync loading or AMD loading, you don't have to use `mllembed('method', 'arg', ...)` since `mllembed.method('arg', ...)` will be available\r\n    //README.md has more information on this\r\n    var mllembed = function () {\r\n\r\n        //Convert arguments to array\r\n        var args = Array.prototype.slice.call(arguments);\r\n\r\n        //Get the method\r\n        var method = args.shift();\r\n\r\n        DEBUG && console.info('[mll.embed] Got lazycaller call for \"' + method + '()\".', args); //jshint ignore:line\r\n\r\n        //Call the method\r\n        mllembed[method].apply(null, args);\r\n\r\n    };\r\n\r\n    //Initialize configuration\r\n    mllembed.configuration = {\r\n        _autorun: !amd,\r\n        _embedUrl: 'https://embed.movielala.com/embed/',\r\n        _youtubeRegexps: [\r\n            /^https?:\\/\\/www\\.youtube\\.com\\/embed\\/([\\w\\-]{11})(?:\\?(.+)$|$)/,\r\n            /^https?:\\/\\/www\\.youtu\\.be\\/embed\\/([\\w\\-]{11})(?:\\?(.+)$|$)/,\r\n            /^https?:\\/\\/www\\.youtube-nocookie\\.com\\/embed\\/([\\w\\-]{11})(?:\\?(.+)$|$)/\r\n        ]\r\n    };\r\n\r\n    //The function that builds the query string\r\n    mllembed.getQueries = function () {\r\n\r\n        var list = [],\r\n            i;\r\n\r\n        for (i in mllembed.configuration) {\r\n            //Check if the property is not inherited\r\n            if (mllembed.configuration.hasOwnProperty(i)) {\r\n                //Check if it is not private\r\n                if (!i.match(/^\\_/)) {\r\n                    list.push(i + '=' + mllembed.configuration[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return list;\r\n\r\n    };\r\n\r\n    //The function that gets and sets configuration\r\n    mllembed.config = function (key, value) {\r\n\r\n        //Get the old value\r\n        var oldValue = mllembed.configuration[key];\r\n\r\n        //Set the value if it's provided\r\n        if (arguments.length !== 1) {\r\n            mllembed.configuration[key] = value;\r\n        }\r\n\r\n        DEBUG && console.info('[mll.embed] Configuration \"' + key + '\"=>\"' + value + '\" (was \"' + oldValue + '\") done.'); //jshint ignore:line\r\n\r\n        //Return the old value\r\n        return oldValue;\r\n\r\n    };\r\n\r\n    //The function that converts embeds\r\n    mllembed.convert = function convert(element) {\r\n\r\n        //Is this a DOM element?\r\n        if (typeof element !== 'object' || !element.tagName) {\r\n            throw new Error('mllembed.convert() expects an IFRAME for its first and only parameter.');\r\n        }\r\n\r\n        //Is this DOM node an IFRAME?\r\n        //In HTML, element.tagName is always uppercase, but not in XML so we toUpperCase() it just in case\r\n        //https://developer.mozilla.org/en-US/docs/Web/API/Element.tagName\r\n        if (element.tagName.toUpperCase() !== 'IFRAME') {\r\n            throw new Error('mllembed.convert() expects an IFRAME for its first and only parameter.');\r\n        }\r\n\r\n        //Try to match the URL\r\n        var match;\r\n        for (var i = mllembed.configuration._youtubeRegexps.length; i--;) {\r\n            var regexp = mllembed.configuration._youtubeRegexps[i];\r\n\r\n            //Try to match\r\n            match = element.src.match(regexp);\r\n\r\n            //Did we?\r\n            if (match) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        //Did it work?\r\n        if (!match) {\r\n            \r\n            DEBUG && console.info('[mll.embed] Converter couldn\\'t match \"' + element.src + '\".'); //jshint ignore:line\r\n\r\n            return false;\r\n        }\r\n\r\n        DEBUG && console.info('[mll.embed] Converter matched \"' + element.src + '\".'); //jshint ignore:line\r\n\r\n        //Get the video ID\r\n        var videoId = match[1];\r\n\r\n        //Get the video queries\r\n        var videoQueries = match[2]?match[2].split('&'):[];\r\n\r\n        //Build the query string\r\n        //Using \"&amp;\" instead of \"&\" is an HTML thing\r\n        //Since this code isn't being inlined in HTML, we don't have to use \"&amp;\"\r\n        //http://stackoverflow.com/questions/7261628/xhtml-html-js-syntax-when-do-i-use-amp\r\n        var queryString = videoQueries.concat(mllembed.getQueries()).join('&');\r\n\r\n        //Change the source\r\n        element.src = mllembed.configuration._embedUrl + videoId + '?' + queryString;\r\n\r\n        DEBUG && console.info('[mll.embed] Converted to \"' + element.src + '\".'); //jshint ignore:line\r\n\r\n        return true;\r\n\r\n    };\r\n\r\n    //The function that looks for embeds to convert them\r\n    mllembed.run = function run() {\r\n\r\n        DEBUG && console.info('[mll.embed] Running...'); //jshint ignore:line\r\n\r\n        //Look for iframes\r\n        //We need to use lowercase 'iframe' for XML compatibility\r\n        //https://developer.mozilla.org/en-US/docs/Web/API/Element.getElementsByTagName\r\n        var iframes = document.getElementsByTagName('iframe');\r\n        for (var i = iframes.length; i--;) {\r\n            var iframe = iframes[i];\r\n\r\n            //Did we check this before?\r\n            if (iframe.getAttribute('data-mllembed-checked')) {\r\n                continue;\r\n            }\r\n\r\n            //Now we will check it for sure\r\n            iframe.setAttribute('data-mllembed-checked', true);\r\n\r\n            //Let's convert it\r\n            mllembed.convert(iframes[i]);\r\n        }\r\n\r\n        DEBUG && console.info('[mll.embed] Ran.'); //jshint ignore:line\r\n\r\n    };\r\n\r\n    //The function that stores callbacks and calls them when we are ready\r\n    //The execution is FIFO\r\n    mllembed.isReady = false;\r\n    var readyCallbacks = [];\r\n    mllembed.ready = function ready(callback) {\r\n\r\n        //Is this a valid callback?\r\n        if (typeof callback !== 'function') {\r\n            throw new Error('mllembed.ready() expects a function for its first and only parameter.');\r\n        }\r\n\r\n        //Are we ready?\r\n        if (mllembed.isReady) {\r\n\r\n            DEBUG && console.info('[mll.embed] Calling \"ready()\" callback directly...'); //jshint ignore:line\r\n\r\n            //Then just call it\r\n            callback(mllembed);\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        DEBUG && console.info('[mll.embed] Pushing \"ready()\" callback to the list...'); //jshint ignore:line\r\n\r\n        //Push the callback to the list\r\n        readyCallbacks.push(callback);\r\n\r\n    };\r\n\r\n    //The function we call when the page is ready\r\n    //We might call it more than once, it's no problem\r\n    var onReady = function onReady() {\r\n\r\n        DEBUG && console.info('[mll.embed] \"onReady()\" got called.'); //jshint ignore:line\r\n\r\n        //Mark it\r\n        mllembed.isReady = true;\r\n\r\n        //Call the callbacks\r\n        var callback;\r\n        while ((callback = readyCallbacks.shift())) {\r\n            DEBUG && console.info('[mll.embed] Calling \"ready()\" callback late...'); //jshint ignore:line\r\n\r\n            callback(mllembed);\r\n        }\r\n\r\n        //Should we autorun?\r\n        if (!mllembed.config('_autorun')) {\r\n            return;\r\n        }\r\n\r\n        //We could call `run()` right here, but there will probably be other scripts which inject content on DOMContentLoaded or load.\r\n        //By doing a `setTimeout(func, 0)`, we send our call to the callback queue and let everything on call stack get executed.\r\n        window.setTimeout(mllembed.run, 0);\r\n\r\n    };\r\n\r\n    //Detect the lazycaller\r\n    if (typeof window.mllembed === 'function' && window.mllembed.stack) {\r\n        //Store the lazycaller\r\n        var lazycaller = window.mllembed;\r\n\r\n        //Swap it with mllembed\r\n        window.mllembed = mllembed;\r\n\r\n        //Invoke the calls on the lazycaller stack\r\n        DEBUG && console.info('[mll.embed] Emptying lazycaller stack...'); //jshint ignore:line\r\n\r\n        for (var i = lazycaller.stack.length; i--;) {\r\n            var call = lazycaller.stack[i];\r\n\r\n            //Invoke the call\r\n            mllembed.apply(null, call);\r\n        }\r\n    }\r\n\r\n    //Run!\r\n    //Are we ready?\r\n    if (document.readyState === 'complete') {\r\n        DEBUG && console.info('[mll.embed] Document is ready.'); //jshint ignore:line\r\n\r\n        onReady();\r\n    //No?\r\n    } else {\r\n        DEBUG && console.info('[mll.embed] Document is not ready.'); //jshint ignore:line\r\n\r\n        window.addEventListener('load', onReady, false);\r\n        document.addEventListener('DOMContentLoaded', onReady, false);\r\n    }\r\n\r\n    //Export library\r\n    return mllembed;\r\n\r\n}));"],"sourceRoot":"/source/"}